import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.appdistribution'

apply from: '../ktlint.gradle'

def URL_PROXY_BASE_STAGING = "https://wallet-proxy.testnet.concordium.com"
def URL_PROXY_BASE_PRODUCTION = "https://wallet-proxy.mainnet.concordium.software"

def URL_EXPLORER_BASE_STAGING = "https://testnet.ccdscan.io/"
def URL_EXPLORER_BASE_PRODUCTION = "https://ccdscan.io/"

def PROVIDER_AUTHORITY_BASE = "com.pioneeringtechventures.wallet.DataFileProvider"
def PROVIDER_AUTHORITY_STAGING = PROVIDER_AUTHORITY_BASE+"-staging"
def PROVIDER_AUTHORITY_PROD = PROVIDER_AUTHORITY_BASE

def SCHEME_BASE = "cryptoxmwallet"
def SCHEME_STAGING = SCHEME_BASE+"-staging"
def SCHEME_PROD = SCHEME_BASE

def WC_SCHEME_BASE = "cryptox-wc"
def WC_SCHEME_STAGING = WC_SCHEME_BASE+"-staging"
def WC_SCHEME_PROD = WC_SCHEME_BASE

static def buildTime() {
    def dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"))
    return dateFormat.format(new Date())
}

static def buildTimeTicks() {
    def time = System.currentTimeMillis()
    return time
}

int extractVersionCode() {
    def stdout = new ByteArrayOutputStream()
    exec {
        workingDir projectDir
        executable 'git'
        args 'rev-list', '--count', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim().toInteger()
}

android {
    def vCode = extractVersionCode() + 700
    compileSdkVersion 34
    defaultConfig {
        applicationId "com.tacans.connect"
        minSdkVersion 26
        targetSdkVersion 34
        versionCode vCode
        versionName "0.6.1-qa.4"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "BUILD_NUMBER", "\"${vCode}\"")
        buildConfigField("String", "BUILD_TIME", "\"${buildTime()}\"")
        buildConfigField("String", "BUILD_TIME_TICKS", "\"${buildTimeTicks()}\"")
        buildConfigField("String", "ENV_NAME", "none")
        buildConfigField("boolean", "USE_BACKEND_MOCK", "false")
        buildConfigField("boolean", "INCL_DEV_OPTIONS", "false")
        buildConfigField("boolean", "SHOW_GTU_DROP", "false")
        buildConfigField("boolean", "USE_LIBRARY_PROVIDED_IDENTITIES", "true")
        buildConfigField("Long", "ACCOUNT_UPDATE_FREQUENCY_SEC", "60l")

        buildConfigField("boolean", "FAIL_IDENTITY_CREATION", "false")
        buildConfigField("boolean", "FORCE_NO_EMAIL_CLIENTS", "false")

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation": "$projectDir/schemas".toString(),
                        "room.incremental"   : "true"]
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
        }

        release {
            debuggable false
            signingConfig signingConfigs.debug // To be overridden.
            minifyEnabled false // Unlocking requires vigilant testing.
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"

    productFlavors {
        stage {
            applicationIdSuffix ".staging"
            manifestPlaceholders = [appName:"CryptoX Wallet Stage"]

            firebaseAppDistribution {
                appId = System.getenv('FIREBASE_APP_ID')
                serviceCredentialsFile = file("secret/firebase-stage.json")
                releaseNotesFile = file("firebase-releasenotes.txt")
                groups = "testers-2023, concordium-team"
            }

            buildConfigField("String", "EXPORT_CHAIN", "\"testnet\"")
            buildConfigField("String", "ENV_NAME", "\"testnet\"")
            buildConfigField("String", "URL_PROXY_BASE", "\"${URL_PROXY_BASE_STAGING}\"")
            buildConfigField("String", "URL_EXPLORER_BASE", "\"${URL_EXPLORER_BASE_STAGING}\"")

            buildConfigField("boolean", "SHOW_GTU_DROP", "true")
            buildConfigField("boolean", "USE_LIBRARY_PROVIDED_IDENTITIES", "false")

            buildConfigField("String", "SCHEME", "\"${SCHEME_STAGING}\"")
            resValue "string", "scheme", "\"${SCHEME_STAGING}\""

            resValue "string", "PROVIDER_AUTHORITY", "\"${PROVIDER_AUTHORITY_STAGING}\""
            buildConfigField("String", "PROVIDER_AUTHORITY", "\"${PROVIDER_AUTHORITY_STAGING}\"")
            buildConfigField("String", "S7_DOMAIN", "\"https://stage.spaceseven.cloud\"")

            buildConfigField("Long", "ACCOUNT_UPDATE_FREQUENCY_SEC", "60l")

            resValue "string", "wc_scheme", "\"${WC_SCHEME_STAGING}\""
        }

        prod {
            manifestPlaceholders = [appName:"CryptoX Wallet"]
            applicationId "com.pioneeringtechventures.wallet"

            buildConfigField("String", "EXPORT_CHAIN", "\"mainnet\"")
            buildConfigField("String", "ENV_NAME", "\"production\"")
            buildConfigField("String", "URL_PROXY_BASE", "\"${URL_PROXY_BASE_PRODUCTION}\"")
            buildConfigField("String", "URL_EXPLORER_BASE", "\"${URL_EXPLORER_BASE_PRODUCTION}\"")
            buildConfigField("boolean", "SHOW_GTU_DROP", "false")
            buildConfigField("boolean", "USE_LIBRARY_PROVIDED_IDENTITIES", "false")

            buildConfigField("String", "SCHEME", "\"${SCHEME_PROD}\"")
            resValue "string", "scheme", "\"${SCHEME_PROD}\""

            resValue "string", "PROVIDER_AUTHORITY", "\"${PROVIDER_AUTHORITY_PROD}\""
            buildConfigField("String", "PROVIDER_AUTHORITY", "\"${PROVIDER_AUTHORITY_PROD}\"")

            buildConfigField("Long", "ACCOUNT_UPDATE_FREQUENCY_SEC", "60l")
            buildConfigField("String", "S7_DOMAIN", "\"https://spaceseven.com\"")

            resValue "string", "wc_scheme", "\"${WC_SCHEME_PROD}\""
        }
    }

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/atomicfu.kotlin_module']
            excludes += ['META-INF/INDEX.LIST']
            excludes += ['META-INF/DEPENDENCIES']
            excludes += ['META-INF/LICENSE.md']
            excludes += ['META-INF/NOTICE.md']
        }
    }
    buildFeatures {
        viewBinding true
    }
    namespace 'com.concordium.wallet'
}

dependencies {
    def lifecycle_version = "2.4.0"
    def room_version = "2.5.0"

    implementation platform('com.google.firebase:firebase-bom:28.3.0')
    implementation 'com.google.firebase:firebase-analytics:20.0.0'
    implementation 'com.google.firebase:firebase-crashlytics:18.2.4'

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api 'com.google.zxing:core:3.4.1'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // Coroutines
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0"

    implementation 'com.github.bumptech.glide:glide:4.14.2'
    kapt 'com.github.bumptech.glide:compiler:4.14.2'
    implementation 'com.caverock:androidsvg-aar:1.4'

    implementation "com.github.komputing.khash:sha256:1.1.1"

    // Android/Google
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.biometric:biometric:1.1.0'
    implementation 'com.google.iot.cbor:cbor:0.01.02'
    implementation 'com.google.android.flexbox:flexbox:3.0.0'

    // Lifecycles
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation 'androidx.fragment:fragment-ktx:1.4.0'

    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'
    implementation('com.github.ihsanbal:LoggingInterceptor:3.1.0') {
        exclude group: 'org.json', module: 'json'
    }

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    androidTestImplementation "androidx.room:room-testing:$room_version"

    // Barcode
    implementation 'com.google.android.gms:play-services-vision:20.1.3'

    // Chrome custom tabs
    implementation 'androidx.browser:browser:1.4.0'

    implementation 'com.github.Redman1037:TSnackBar:V2.0.0'
    implementation 'com.github.Dimezis:BlurView:version-2.0.3'

    // OkHttp/Retrofit
//    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
//    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'
    implementation group: 'io.reactivex.rxjava2', name: 'rxjava', version: '2.2.21'

    // Navigation
    def navigationVersion = '2.3.5'
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"

    // Crypto library
    implementation project(":mobile_wallet_lib-release")

    // Test
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "android.arch.persistence.room:testing:1.1.1"

    // Generate QR
    implementation 'com.journeyapps:zxing-android-embedded:4.1.0'

    // WalletConnect
    implementation "com.walletconnect:android-core:1.5.0"
    implementation "com.walletconnect:sign:2.3.0"

    // Scarlet Gson adapter required for Spaceseven wallet connection.
    implementation("com.tinder.scarlet:message-adapter-gson:0.1.12") {
        // Core must be excluded to avoid class duplication when using WalletConnect.
        exclude group: 'com.tinder.scarlet', module: 'scarlet-core'
    }

    // EventBus
    implementation 'org.greenrobot:eventbus:3.1.1'

    // BIP39
    implementation "cash.z.ecc.android:kotlin-bip39:1.0.4"
}

check.dependsOn ktlint
